import matplotlib.pyplot as plt
import numpy as np
#    gas_properties = 
#        "Air": 1.4,
#        "Nitrogen": 1.4,
#        "Oxygen": 1.4,
#        "Carbon Dioxide": 1.3,
#        "Helium": 1.66,
#        "Hydrogen": 1.41

class Compressor:
    """
    Represents a compressor with flow rate, discharge pressure, efficiency, and estimated CAPEX.
    """

    def __init__(self, flow_rate, discharge_pressure, efficiency, material="Steel", cp=1.4, temperature=298, inlet_pressure=1.0):
        self.flow_rate = flow_rate  # in cubic meters per minute (m^3/min)
        self.discharge_pressure = discharge_pressure  # in bar
        self.efficiency = efficiency  # efficiency ratio (0 to 1)
        self.material = material
        self.cp = cp  # Specific heat ratio of the gas
        self.temperature = temperature  # Temperature in Kelvin
        self.inlet_pressure = inlet_pressure  # Pressure in bar (optional argument)

        if self.efficiency <= 0:
            raise ValueError("Efficiency cannot be zero or negative")

    def calculate_power(self, temperature=None, inlet_pressure=None, cp=None, efficiency=None):
        """
        Calculates power consumption considering temperature, inlet pressure, and specific heat ratio.
        """
        temperature = temperature or self.temperature  # Temperature in Kelvin
        inlet_pressure = inlet_pressure or self.inlet_pressure  # Pressure in bar
        cp = cp or self.cp  # Specific heat ratio
        efficiency = efficiency or self.efficiency  # Efficiency ratio (0 to 1)

        # Convert pressure from bar to pascal for calculations
        inlet_pressure_pascal = inlet_pressure * 1e5  # 1 bar = 100,000 Pascals

        # Assuming ideal gas behavior, calculate the power
        # Note: This formula is a simplified representation and might need adjustment for specific use cases
        power = ((cp * self.flow_rate / efficiency) *
                 (self.discharge_pressure * 1e5 - inlet_pressure_pascal) *
                 (temperature / 298)) / 1e3  # Convert to kW

        return power

    def estimate_maintenance_cost(self, base_cost=500, usage_factor=0.05):
        """
        Estimates the maintenance costs based on usage (factor) and compressor type.

        Args:
            base_cost (float, optional): Base cost of maintenance. Defaults to 500 (units?).
            usage_factor (float, optional): Usage factor impacting maintenance cost (unitless?). Defaults to 0.05.
        """
        maintenance_cost = base_cost + (usage_factor * self.calculate_power())
        return maintenance_cost

    def estimate_capex(self, base_cost_per_kw=800, material_factor={"Steel": 1.0, "Stainless Steel": 1.2}):
        """
        Estimates the Capital Expenditure (CAPEX) based on power and material selection.

        Args:
            base_cost_per_kw (float, optional): Base cost per kW of compressor power. Defaults to 800.
            material_factor (dict, optional): Material cost factor dictionary. Defaults to {"Steel": 1.0, "Stainless Steel": 1.2}.
        """
        if self.material not in material_factor:
            raise ValueError("Material not supported for CAPEX estimation")

        power = self.calculate_power()
        capex = base_cost_per_kw * power * material_factor[self.material]
        return capex

    def get_input():
        """
        Gets input parameters from the user.
        """
        while True:
            try:
                flow_rate = float(input("Enter flow rate (m^3/min): "))
                discharge_pressure = float(input("Enter discharge pressure (bar): "))
                efficiency = float(input("Enter efficiency (0 to 1): "))
                material = input("Enter material (Steel/Stainless Steel): ")
                cp = float(input("Enter specific heat ratio (optional, defaults to 1.4): ")) or 1.4
                inlet_pressure = float(input("Enter inlet pressure (bar, optional, defaults to 1): ")) or 1.0

                if efficiency <= 0 or efficiency > 1:
                    raise ValueError("Efficiency must be between 0 and 1")

                return flow_rate, discharge_pressure, efficiency, material, cp, inlet_pressure
            except ValueError as ve:
                print("Invalid input:", ve)

def main():
    """
    Example usage of the Compressor class with demonstration and graph.
    """
    try:
        flow_rate, discharge_pressure, efficiency, material, cp, inlet_pressure = get_input()
        compressor = Compressor(flow_rate, discharge_pressure, efficiency, material, cp, inlet_pressure)

        power = compressor.calculate_power()
        capex = compressor.estimate_capex()
        maintenance_cost = compressor.estimate_maintenance_cost()

        print("Required Power: {:.2f} kW".format(power))
        print("Estimated CAPEX for {} compressor: ${:,.2f}".format(material, capex))

        print("Estimated Maintenance Cost: ${:,.2f}".format(maintenance_cost))

        # Demonstration: Power vs. Flow Rate at different efficiencies
        flow_rates = range(50, 250, 10)  # Sample flow rates (m^3/min)
        powers = []
        efficiencies = [0.7, 0.8, 0.9]  # Different efficiencies to plot

        for rate in flow_rates:
            for eff in efficiencies:
                comp = Compressor(rate, discharge_pressure, eff)  # Assuming constant discharge pressure
                powers.append(comp.calculate_power(efficiency=eff))

        # Plotting (assuming you have imported matplotlib.pyplot as plt)
        plt.figure(figsize=(8, 6))
        for i, eff in enumerate(efficiencies):
            plt.plot(flow_rates, powers[i::len(efficiencies)], marker='o', label=f'Efficiency = {eff:.1f}')
        plt.xlabel("Flow Rate (m^3/min)")
        plt.ylabel("Power Consumption (kW)")
        plt.title("Power vs. Flow Rate for Different Compressor Efficiencies")
        plt.legend()
        plt.grid(True)
        plt.show()

    except ValueError as ve:
        print("Error:", ve)


# This line executes the main function if this script is run directly
if __name__ == "__main__":
    main()

